******************************************************************************************************************************************************************************
//RECURSIVE APPROACH
Node* sortedMerge(Node* head1, Node* head2)  
{  
    if(head1==NULL){
        return head2;
    }
    if(head2==NULL){
        return head1;
    }
    Node* result;
    if(head1->data < head2->data){
        result=head1;
        result->next=sortedMerge(head1->next, head2);
        
    }
    else{
        result=head2;
        result->next= sortedMerge(head1, head2->next);
        
    }
      return result; 
}  
**************************************************************************************************************************************************************************
//ITERATIVE APPROACH
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* ptr1=list1;
        ListNode* ptr2=list2;
        ListNode* DummyNode=new ListNode(-1);
        ListNode* ptr3=DummyNode;

    while(ptr1!=NULL && ptr2!=NULL){
        if(ptr1->val < ptr2->val){
            ptr3->next=ptr1;
            ptr1=ptr1->next;
            ptr3=ptr3->next;
        }
        else{
            ptr3->next=ptr2;
            ptr2=ptr2->next;
            ptr3=ptr3->next;

        }
    }
   while(ptr1!=NULL){  // agr list2 khtm ho gai ho tav
            ptr3->next=ptr1;
            ptr1=ptr1->next;
            ptr3=ptr3->next;

   }
   while(ptr2!=NULL){  // agr list1 khtm ho gai ho tab
            ptr3->next=ptr2;
            ptr2=ptr2->next;
            ptr3=ptr3->next;

   }
   return DummyNode->next; // yhe return kro DummyNode-> next , na ki ptr3->next

        
    }
};
