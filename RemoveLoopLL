

class Solution
{
    public:
    //Function to remove a loop in the linked list.
    void removeLoop(Node* head)
    {
     Node* slow = head;
    Node* fast = head;

    // Detect cycle
    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            break; // Cycle detected
        }
    }

    // No cycle detected
    if (fast == nullptr || fast->next == nullptr) {
        return;
    }

    // Find the start of the cycle
    slow = head;
    while (slow != fast) {
        slow = slow->next;
        fast = fast->next;
    }

    // Find the node just before the cycle starts
    while (fast->next != slow) {
        fast = fast->next;
    }

    // Remove the cycle
    fast->next = nullptr;
}
    
        
        // code here
        // just remove the loop without losing any nodes
    
};

